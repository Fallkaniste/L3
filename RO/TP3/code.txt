#include<stdio.h>
#include<math.h>
#include<stdlib.h>

#define MAX_INT 65535

#define max(x,y) x>y?x:y
#define min(x,y) x<y?x:y

typedef struct {int date_plutot, date_plutard, marge, num_tache;}tache;

tache *projet;
int **matrice;

int main()
{
int chemin[100];
int associe [100];
int som_ch = 0;
int nbr_tache = 16 ;
int i,j,k;
int som = 0;
int *pile;



projet = (tache *)malloc((nbr_tache + 2) * sizeof(tache));

matrice = (int **)malloc((nbr_tache + 2) * sizeof(int *));

for(i = 0; i < nbr_tache + 2; i++)
{
   matrice[i] = (int *)malloc((nbr_tache + 2) * sizeof(int));	   
}

for(i = 0; i < nbr_tache + 2; i++)
{
    for(j = 0; j < nbr_tache + 2; j++)
    {
	    matrice[i][j] = -1;
    }
}
       
matrice[0][1] = 0;

pile = (int *)malloc((nbr_tache +2) * sizeof(int));

matrice[0][2]=0;

matrice[1][3]=3;
matrice[1][4]=3;
matrice[1][6]=3;
matrice[1][7]=3;
matrice[1][8]=3;
matrice[1][10]=3;
matrice[1][11]=3;
matrice[1][12]=3;
matrice[1][13]=3;
matrice[1][14]=3;

matrice[2][3]=4;
matrice[2][4]=4;
matrice[2][5]=4;
matrice[2][10]=4;
matrice[2][11]=4;
matrice[2][12]=4;
matrice[2][13]=4;
matrice[2][14]=4;

matrice[3][14]=7;

matrice[4][11]=1;
matrice[4][12]=1;
matrice[4][13]=1;
matrice[4][13]=1;

matrice[5][7]=8;
matrice[5][10]=8;
matrice[5][14]=8;

matrice[6][8]=5;
matrice[6][9]=5;
matrice[6][10]=5;
matrice[6][14]=5;

matrice[7][10]=8;
matrice[7][14]=8;

matrice[8][9]=8;
matrice[8][10]=8;
matrice[8][11]=8;
matrice[8][14]=8;

matrice[9][10]=5;
matrice[9][14]=5;

matrice[10][14]=7;

matrice[11][12]=6;
matrice[11][14]=6;

matrice[12][14]=2;

matrice[13][14]=7;

matrice[14][15]=4;

matrice[nbr_tache][nbr_tache+1] = 1;

// date au plutot
projet[0].date_plutot = 0;

for(j = 1; j < nbr_tache + 2; j++)
{
    projet[j].date_plutot = 0;
    for(i = 0; i < j; i++)
    {
        if(matrice[i][j] != -1)
        {
	        projet[j].date_plutot = max(projet[j].date_plutot, projet[i].date_plutot + matrice[i][j]);
	    }
    }	      
    printf(" \n La dâte au plutot de %d est %d", j, projet[j].date_plutot);
}

projet[nbr_tache+1].date_plutard = projet[nbr_tache+1].date_plutot;

// date au plutard
for(i = nbr_tache ; i >= 0; i--)
   {
   projet[i].date_plutard = 0;	   
   for(j = i + 1; j <= nbr_tache + 1; j++)
      {
      if(matrice[i][j] != -1)
      {
        projet[i].date_plutard  = min (projet[j].date_plutard  -  matrice[i][j], projet[i].date_plutard); 
      }
      }	      
   printf(" \n date_plutard de %d: %d", i, projet[i].date_plutot);
   }


// marges
for(i=0; i < nbr_tache +2; i++)
   {
    projet[i].marge = projet[i].date_plutard - projet[i].date_plutot;
    printf("\n La marge de %d: %d", i, projet[i].marge);
   }


associe[som_ch] = -1;
pile[som] = 1;
som ++;
som_ch ++;

while(som > 0)
	{
	som --;
	i = pile[som];
	chemin[som_ch] = i;
	som_ch ++;
	for(j = i+1; j < nbr_tache + 2; j++)
   	  if(matrice[i][j] != -1)	
      	   {
      	   if(projet[i].marge == 0 && projet[j].marge == 0 )
        	{
		if(j != nbr_tache + 1)	
		   {
		   pile[som] = j;
		   associe[som] = i;
		   som++; 
		   }
                  else 
	             {
		     printf("\n ==> ");	     
		     for (k = 1; k < som_ch; k++)
			 printf(" %d ", chemin[k]);
		     for (k = 0; k < som_ch; k++)
		          if(som > 0 && chemin[k] ==  associe[som - 1])
			  {
			  som_ch = k + 1;
			  break;
			  }	
		     }		     
     	        }	
	   }
	}	

printf("\n");
return 0;
}