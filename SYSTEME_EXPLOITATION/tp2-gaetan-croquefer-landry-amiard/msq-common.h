/**
* \file msq-common.h
*/
#ifndef msq_common_h
#define msq_common_h
/**
* Inclusions for all the files.
*/
#include <errno.h>
#include <getopt.h>
#include <limits.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
#include "msq-message.h"
/**
* Error code thrown when msq_message_set_name detects that the message type is equal or inferior to 0.
*/
#define EMSGTYP 134
/**
* Error code thrown when msq_message_set_text detects that the message is too long.
*/
#define EMSGTXT 135
/**
* Error code thrown when stringToLong detects that the string is not a number.
*/
#define ENAN 138
/**
* Error code thrown when shm-get is unable to return an id from the key.
*/
#define EID 139
/**
* Error code thrown when stringToLong detects an out of range number.
*/
#define EOOF 140
/**
* Name of the executable.
*/
extern char* argv0;
/**
* Prints into the error flow with variable parameters depending on the error, and exits.
* \param nullPtr Always NULL, used as reference for the va_start function.
* \param ... Variable argument list, composed of :
*   + argv0 Name of the executable where the error occured.
*   + __FILE__ File where the error occured.
*   + __LINE__ Line where the error occured.
*   + Various arguments to display.
*/
void printError (void* nullPtr, ...);
/**
* Converts a numerical string to a long.
* \param optarg The string to convert.
* \return -1 on error (if the string is not a valid number).
*/
long stringToLong (char* optarg);
#endif
